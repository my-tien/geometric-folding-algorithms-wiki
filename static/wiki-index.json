{
    "keys": [
        {
            "path": [
                "titles"
            ],
            "id": "titles",
            "weight": 1,
            "src": "titles",
            "getFn": null
        },
        {
            "path": [
                "subtitles"
            ],
            "id": "subtitles",
            "weight": 1,
            "src": "subtitles",
            "getFn": null
        },
        {
            "path": [
                "body"
            ],
            "id": "body",
            "weight": 1,
            "src": "body",
            "getFn": null
        }
    ],
    "records": [
        {
            "i": 0,
            "$": {
                "0": [
                    {
                        "v": "Applications",
                        "i": 0,
                        "n": 1
                    }
                ],
                "1": [
                    {
                        "v": "Robotics",
                        "i": 0,
                        "n": 1
                    }
                ],
                "2": {
                    "v": "# Applications\nCreated Samstag 27 Juli 2024\n\nRobotics\n--------\nAn articulated robotic manipulator can be viewed as a chain of links. E.g. the exact position or [configuration](./Linkage/Linkage_Configuration.md) of a robot arm with four joints may be specified as a point in a 4D [configuration space](./Linkage/Linkage_Configuration.md#configuration-space).\n\nThe number of axes along which each joint can rotate are the degrees of freedom of the robot arm. One challenge in Robotics is the complexity of the configuration-space approach for robots with a large number of degrees of freedom.\n\nAnother concern of robot designers is i*nverse kinematics* or \"reachability\": Given a desired tool position, compute joint angles which achieve that position.\n\n",
                    "n": 0.1
                }
            }
        },
        {
            "i": 1,
            "$": {
                "0": [
                    {
                        "v": "Foldability Questions",
                        "i": 0,
                        "n": 0.707
                    }
                ],
                "1": [],
                "2": {
                    "v": "# Foldability Questions\nCreated Donnerstag 25 Juli 2024\n\n[Ruler Folding](./Ruler_Folding.md)\n[Map Folding](./Map_Folding.md)\n[Polygon Folding](./Polygon_Folding.md)\n\n",
                    "n": 0.316
                }
            }
        },
        {
            "i": 2,
            "$": {
                "0": [
                    {
                        "v": "Origami Design",
                        "i": 0,
                        "n": 0.707
                    }
                ],
                "1": [],
                "2": {
                    "v": "# Origami Design\nCreated Donnerstag 25 Juli 2024\n\nGiven a 3D shape (an origami final folded state), find a crease pattern and sequence of folds to create the origami (if possible) from a given square piece of paper.\n\nIn general, an unsolved problem. In practice, origami shapes are a subset of all possible 3D shapes that are constructiblein two steps:\n\n\n1. Creating an origami *base*\n2. Creasing and adjusting the remaining paper to achieve a desired design\n\n\nAn origami base can be seen as a metric tree, i.e. a tree with lengths assigned to the edges.\n\nRobert Lang developed an algorithm to construct a crease pattern to achieve any given \"uniaxial base\", the most useful type of origami base. It is implemented in the TreeMaker software. It is not yet formally proven that TreeMaker crease patterns lead to non-self-intersecting folding states.\n\n",
                    "n": 0.086
                }
            }
        },
        {
            "i": 3,
            "$": {
                "0": [
                    {
                        "v": "Polygon Folding",
                        "i": 0,
                        "n": 0.707
                    }
                ],
                "1": [],
                "2": {
                    "v": "# Polygon Folding\nCreated Donnerstag 25 Juli 2024\n\nThe inverse of unfolding a convex polyhedron to a net is folding a polygon to a convex polyhedron:\n\nGiven a polygon of *n* vertices, can it fold to some convex polyhedron?\n\nThe assumption is that the folded polygon covers the surface of the polyhedron precisely once: there are neither gaps nor double coverage. The polygon doesn't have to be an edge unfolding of the polyhedron, the cuts that produce it are arbitrary.\nFor the special case of glueing whole edges of the polygon to one another, an *O*(*n³*)-time algorithm is known for a polygon with *n* vertices. Without edge-to-edge restriction, an exponential-time algorithm is known.\n\n\n",
                    "n": 0.096
                }
            }
        },
        {
            "i": 4,
            "$": {
                "0": [
                    {
                        "v": "Ruler Folding",
                        "i": 0,
                        "n": 0.707
                    }
                ],
                "1": [],
                "2": {
                    "v": "# Ruler Folding\nCreated Donnerstag 25 Juli 2024\n\nA polygonal *chain* is a linkage whose graph is just a path. If one views it as a \"carpenters ruler\", it is natural to seek to fold it up int as compact a package as possible. This is known as the \"ruler folding problem\":\n\nGiven a polygonal cain with specific given (integer) lengths for its *n* links, and an integer *L* , can it be folded flat (each joint angle either 0 or 180°) so that its total length is ≤ *L*?\n\nIn 1985 it was proven that this question is NP-complete.\n\n\n",
                    "n": 0.102
                }
            }
        },
        {
            "i": 5,
            "$": {
                "0": [
                    {
                        "v": "Design Problems",
                        "i": 0,
                        "n": 0.707
                    }
                ],
                "1": [],
                "2": {
                    "v": "# Design Problems\nCreated Donnerstag 25 Juli 2024\n\n[Kempe Universality](./Kempe_Universality.md)\n[Origami Design](./Origami_Design.txt)\n[Unfolding to Net](./Unfolding_to_Net.md)\n\n\n",
                    "n": 0.302
                }
            }
        },
        {
            "i": 6,
            "$": {
                "0": [
                    {
                        "v": "Kempe Universality",
                        "i": 0,
                        "n": 0.707
                    }
                ],
                "1": [],
                "2": {
                    "v": "# Kempe Universality\nCreated Donnerstag 25 Juli 2024\n\nWith one or more joints of a [Planar linkage](./Linkage.md#planar-linkage) pinned to the plane, the motion of any particular free joint *J* is constrained by the structure of the linkage. A specific question here is this:\n\nLet *S* be an arbitrary algebraic curve in the plane. Is there some linkage so that the motion of some free joint *J* traces out precisely *S*?\n\nYes. The original idea and a flawed proof for the construction of a linkage to trace a given curve is due to Alfred B. Kempe from 1876. The proof was repaired 2002.\n\nStill open question: Whether there is a linkage to follow any algebraic curve that does not self-intersect during motion.\n\n",
                    "n": 0.093
                }
            }
        },
        {
            "i": 7,
            "$": {
                "0": [
                    {
                        "v": "Linkage",
                        "i": 0,
                        "n": 1
                    }
                ],
                "1": [
                    {
                        "v": "Mechanism",
                        "i": 1,
                        "n": 1
                    },
                    {
                        "v": "Planar linkage",
                        "i": 0,
                        "n": 0.707
                    }
                ],
                "2": {
                    "v": "# Linkage\nCreated Donnerstag 25 Juli 2024\n\nA *linkage* is a collection of fixed-length 1D segments joined at their endpoints to form a graph. A segment endpoint (graph node) is called a *vertex*. The segments (graph edges) are often called *links* or *bars*, and shared endpoints are called *joints* or *vertices*.\nSome joints may be *pinned* to specific locations.\n\nPlanar linkage\n--------------\nA planar linkage is a linkage of one-dimensional segments lying in a plane. The joints permit full 360° rotation, and the rigid segments are permitted to pass through one another freely.\n\nMechanism\n---------\n Lose term in the book to refer to any collection of rigid bodies connected by joints, hinges, sliders, etc.\n\n",
                    "n": 0.097
                }
            }
        },
        {
            "i": 8,
            "$": {
                "0": [
                    {
                        "v": "Unfolding to Net",
                        "i": 0,
                        "n": 0.577
                    }
                ],
                "1": [],
                "2": {
                    "v": "# Unfolding to Net\nCreated Donnerstag 25 Juli 2024\n\nIn the 16th century, Albrecht Dürer drew many convex polyhedra cut open along edges and unfolded flat to a single non-overlapping piece. This is called a *net*.\n\nYet unsolved question:\n\nCan the surface of every convex polyhedron be cut along edges and unfolded to a net?\n\nThe design target is a planar shape that avoids overlap. If the cuts are not restricted to the edges of the polyhedron, the answer is known to be YES.\n\n\n",
                    "n": 0.113
                }
            }
        },
        {
            "i": 9,
            "$": {
                "0": [
                    {
                        "v": "Geometric Folding toolset",
                        "i": 0,
                        "n": 0.577
                    }
                ],
                "1": [],
                "2": {
                    "v": "# Geometric Folding toolset\nCreated Samstag 27 Juli 2024\n\nThese are the tools and objects the book deals with:\n\n\n* Mathematics: geometry and discrete mathematics\n* Computer science: computational geometry, big-O notation\n* Objects: 1D linkages, 2D paper and 2D surfaces of polyhedra in 3D space\n\n\n",
                    "n": 0.156
                }
            }
        },
        {
            "i": 10,
            "$": {
                "0": [
                    {
                        "v": "Content Classification",
                        "i": 0,
                        "n": 0.707
                    }
                ],
                "1": [],
                "2": {
                    "v": "# Content Classification\nCreated Sonntag 21 Juli 2024\n\nPossible ways to classify contents of the book:\n\n- by object: 1D linkages, 2D paper, 3D polyhedra\n- by process:  folding vs. unfolding, but both are just a reconfiguration between two states\n- by problem:\n*design problem*: given a specific folded state, design a way to fold to that state\n*foldability problem*: can this type of object fold to some general class of folded states?\n\n",
                    "n": 0.123
                }
            }
        },
        {
            "i": 11,
            "$": {
                "0": [
                    {
                        "v": "Map Folding",
                        "i": 0,
                        "n": 0.707
                    }
                ],
                "1": [],
                "2": {
                    "v": "# Map Folding\nCreated Donnerstag 25 Juli 2024\n\nA *flat folding* of a piece of paper is a folding by creases into a multilayered but planar shape. The paper is permitted to touch but not to penetrate itself. A fundamental questionon flat folding is this:\n\nGiven a (rectangular) piece of paper marked with creases, with each subsegment marked as either a mountain or valley crease, does it have a flat folded state?\n\nIn 1996 the question was proven to be NP-hard, i.e. at least as intractable as an NP-complete problem.\n\nYet open question:\n\nGiven a (rectuangluar) piece of paper marked by a regular square grid of unit-separated creases, with each subsegment marked as either a mountain or a valley crease, can it be folded into a single 1×1 square?\n\n\n",
                    "n": 0.09
                }
            }
        },
        {
            "i": 12,
            "$": {
                "0": [
                    {
                        "v": "Linkage Classification",
                        "i": 0,
                        "n": 0.707
                    }
                ],
                "1": [],
                "2": {
                    "v": "# Linkage Classification\nCreated Samstag 27 Juli 2024\n\nLinkages can be distinguished according to\n\n\n* their **graph structure**\n\t* general graph\n\t* tree\n\t* single cycle aka polygon\n\t* simple path aka (polygonal) chain aka arc/robot arm/arm\n* the **dimension** of the ambient space in which the linkage lives\n* **intersection conditions**: How may the linkage intersect with itself or with obstacles?\n\t* No constraints means arbitrary rotations and free passing through itself permitted. In 2D e.g. realized by links at slightly different levels in parallel to a plane connected by orthogonal pegs as joints.\n\t* If no self-intersection is allowed, the linkage is called *simple* in the literature and the self-intersection constraint is referred to as the demanded *simplicity* of the linkage. Note that there is a distinction between self-intersection and [self-crossing](./self-crossing.md).\n\n\n\n",
                    "n": 0.091
                }
            }
        },
        {
            "i": 13,
            "$": {
                "0": [
                    {
                        "v": "self-crossing",
                        "i": 0,
                        "n": 1
                    }
                ],
                "1": [],
                "2": {
                    "v": "# self-crossing\n\n",
                    "n": 0.707
                }
            }
        },
        {
            "i": 14,
            "$": {
                "0": [
                    {
                        "v": "Linkage Question Classification",
                        "i": 0,
                        "n": 0.577
                    }
                ],
                "1": [],
                "2": {
                    "v": "# Linkage Question Classification\nCreated Samstag 27 Juli 2024\n\nQuestions asked about linkages can be classified in the following:\n\n\n* **Geometric issue**\n\t* *reconfiguration*: given an initial [configuration](./Linkage_Configuration.md) ![](./Linkage_Question_Classification/equation001.png) and a final configuration ![](./Linkage_Question_Classification/equation002.png), can the linkage be continuously reconfigured from ![](./Linkage_Question_Classification/equation001.png) to ![](./Linkage_Question_Classification/equation002.png), keeping all links rigid (i.e. their original length), staying within the ambient space (e.g. a 2D plane), without violating any imposed intersection conditions? If yes, the linkage is in a *legal* configuration.\n\t* *reachability*: Whether a particular point (usually a link endpoint) of a linkage can reach, i.e. coincide with, a given point of the ambient space. Here the configuration achieving the reaching is considered irrelevant.\n\t* *locking*: Are every two legal configurations of a linkage connected in the configuration space or might a linkage be *locked* or \"stuck\" in one component of the space and thereby isolated from configurations in another component?\n* **Answer desired**\n\t* *Decision problems* seek yes/no answers, e.g. »can the arm reach this point?«\n\t* *Path planning problems* require more in the case of »yes«: an explicit path through the configuration space that achieves the reconfiguration.\n* **Complexity bound sought**\n\t* For path planning problems, the combinatorial complexity of the path may be of interest, e.g. the number of constant-degree piecewise-algebraic arcs composing the path\n\t* In general the algorithmic computational complexity is the primary measure, e.g. *O*(*n^p^), Ω*(*n^q^*), NP-complete, NP-hard, PSPACE-complete, PSPACE-hard, etc.\n\n\n",
                    "n": 0.067
                }
            }
        },
        {
            "i": 15,
            "$": {
                "0": [
                    {
                        "v": "Linkage Configuration",
                        "i": 0,
                        "n": 0.707
                    }
                ],
                "1": [
                    {
                        "v": "Configuration space",
                        "i": 0,
                        "n": 0.707
                    }
                ],
                "2": {
                    "v": "# Linkage Configuration\nCreated Samstag 27 Juli 2024\n\nAlso called a \"placement\", \"confirmation\" or \"realization\" in the literature. \"realization\" is reserved for a different concept in this book.\n\nA configuration of a linkage is a specification of the locations of all link endpoints (and therefore of the link orientations and joint angles). It respects the lengths and non-self-intersection constraints of the linkage but may penetrate obstacles.\n\nA configuration which avoids all obstacles is said to be *free*, and one that touches but does not penetrate obstacles is *semifree*.\n\nConfiguration space\n-------------------\n\nThe configuration of an *n*-vertex polygon in 3D can be specified by 3*n* numbers: *n* triples of vertex coordinates. The *configuration space* (or *moduli space*) is the space of all configurations of a linkage.\nIn the polygon example, this space is a subset of 3*n*-dimensional space, ℝ³*^n^*.\n\n",
                    "n": 0.088
                }
            }
        }
    ]
}